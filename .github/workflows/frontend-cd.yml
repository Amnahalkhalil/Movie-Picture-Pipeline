name: frontend-cd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  linting:
    runs-on: ubuntu-latest

    steps:
    - name: Check the repository
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Install dependencies
      working-directory: starter/frontend
      run: npm ci

    - name: Checkout run lint
      run: cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check the repository
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: starter/frontend
      run: npm ci
  
    - name: Test
      run: cd starter/frontend && npm run test



  build:
    needs: [linting, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Check the repository
      uses: actions/checkout@v3
    
    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      # with:
      #   mask-password: 'false'

    - name: build and push docker image
      run: |
        cd starter/frontend
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag ${{ secrets.ECR_REGISTRY }}:frontend .
        docker push ${{ secrets.ECR_REGISTRY }}:frontend

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name project4-cluster

    - name: Deploy Docker Image to Amazon EKS using kubectl
      working-directory: starter/frontend/k8s
      run: |
          kustomize edit set image frontend=${{ secrets.ECR_REGISTRY }}:frontend
          kustomize build | kubectl apply -f -
