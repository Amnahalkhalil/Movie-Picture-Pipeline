name: Backend Continuous Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3

      - name: Installing dependency manager pipenv
        run: pip install pipenv

      - name: Cache before dependency install
        id: CachingData
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}
        
      - name: Installing dependencies
        run: |
          pipenv install --dev
          pipenv install flake8
          
      - name: Now Running Lint
        run: pipenv run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3

      - name: Installing dependency manager pipenv
        run: pip install pipenv

      - name: Cache before dependency install
        id: CachingData
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Installing dependencies
        run: |
          pipenv install --dev
          pipenv install flake8
  
      - name: Now Running Tests
        run: pipenv run test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint,test]
    defaults:
        run:
          working-directory: backend
    steps:
      - name: Checking Out the code from Repo
        uses: actions/checkout@v3
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL" -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: Setup Authentication against EKS Cluster 
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          kubectl get svc
          kubectl config view

      - name: Run init.sh
        run:  |
          chmod +x init.sh 
          ./init.sh || true
          kubectl config view
        working-directory: setup
          
      - name: Deploy the image to the cluster
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd k8s
          kustomize edit set image backend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          kustomize build | kubectl apply -f -