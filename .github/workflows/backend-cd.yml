name: Backend Continuous Deployment

on:
  # Automatic trigger on push events targeting the main branch and backend application changes
  push:
    branches:
      - main
    path:
      - 'backend/**'

  # On demand run
  workflow_dispatch:


# Jobs defined in the workflow
jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: pip install pipenv && pipenv install

      - name: Run linter
        run: pip install flake8 && pipenv run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: pip install pipenv && pipenv install

      - name: Run tests
        run: pipenv run test

  build_push_and_deploy_image:
    needs: [lint, test]
    if: success()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: backend
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:release-pipeline-${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/$IMAGE_NAME:release-pipeline-${GITHUB_SHA::7}

      - name: Kubeconfig Auth
        env:
          CLUSTER_NAME: cluster
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ vars.AWS_REGION }}

      - name: Deploy the Docker image to Amazon EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: backend
          DEPLOYMENT_NAME: backend
        run: |
          cd k8s
          kustomize edit set image backend=$ECR_REGISTRY/$IMAGE_NAME:release-pipeline-${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide