name: Frontend Integration (CI)

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: "latest"
  # SRC_DIR - path to the frontend root src folder
  SRC_DIR: "${{ github.workspace }}/src/frontend/"
  AWS_REGION: "us-east-1"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup NodeJS ${{env.NODE_VERSION}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: "npm"
          cache-dependency-path: "${{ env.SRC_DIR}}/package-lock.json"

      - name: Install dependencies
        run: cd ${{env.SRC_DIR}} && npm ci

      - name: Run linter
        run: cd ${{env.SRC_DIR}} && npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use NodeJS ${{env.NODE_VERSION}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: "npm"
          cache-dependency-path: "${{ env.SRC_DIR}}/package-lock.json"

      - name: Install dependencies
        run: cd ${{env.SRC_DIR}} && npm ci

      - name: Build
        run: cd ${{env.SRC_DIR}} && npm test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ${{env.SRC_DIR}}
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .